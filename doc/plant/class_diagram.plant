
@startuml
'The namespace should be Kf::
set namespaceSeparator ::

'Main Facade Class
class Kampf << (S,#FF7700) Facade >> {
   - bool bRunning = false
   - AbstractRenderWindow windowContext
   - systemContainerType systemList
   - Messenger* messenger
   - RuleMachine* ruleMachine
   ==
   .. constructor ..
   + void Kampf(
   enumInitType initType = enumInitType::Basic,
   enumWindowType windowType = enumWindowType::SDL,
   enumRenderType renderType = enumRenderType::SDL
   )
   + void runMainLoop(bContinuous=true)
   -- getters --
   + AbstractRenderWindow getRenderWindow()
   + AbstractSystem getSystem(stringType systemType)
   + Messenger getMessenger()
   + Rulemachine getRuleMachine()
}

'The main render window, where all of the magic happens
abstract class AbstractRenderWindow {
   - int windowWidth = 800
   - int windowHeight = 600
   ==
   + AbstractRenderWindow(
     int windowWidth = 800,
     int windowHeight = 600
     )
   + virtual bool reinitialize() = 0
   + virtual bool intialize() = 0
   + virtual draw(AbstractDrawable drawable)
} 

class SDLRenderWindow {
   - int windowWidth = 800
   - int windowHeight = 600
   ==
   + bool reinitialize() = 0
   + bool intialize() = 0
   + draw(AbstractDrawable drawable)
}

SDLRenderWindow --> AbstractRenderWindow

''
'' ENTITIES
''
package "Entities" #C3B1A3 {
abstract class AbstractEntity {

   - stringType name = ""
   - stringType type = "abstract"
   - incrementType id
   - componentListType componentList
   ==
   + static incrementType EntityID = 0
   .. constructor ..
   + AbstractEntity(
     stringType name,
     incrementType id = GENERATE_ID,
     stringType type = ENTITY_ABSTRACT_TYPE
     )
   -- getters/setters --
   + stringType getName()
   + setName(stringType name)
   + stringType getType()
   + incrementType getID()
   
   + componentListType getComponentContainer();
   + componentListType getComponentsByFamily(enumComponentFamily family)
   + componentListType getComponentByName(stringType name)
   + AbstractComponent::iterator traverseComponentTree()

   + void addComponent(AbstractComponent theComponent)
} 	

} 
'END package "Entities"

''Relation between Entities
'' Nothing here


''
'' MANAGERS
''

package "Managers" #FE6F4D {

class EntityManager << (S,#FF7700) >> {
   - std::vector<AbstractEntity> entityList
   ==
   + void addEntity(AbstractEntity entity)
   + std::vector<AbstractEntity> getAllEntities()
   + AbstractEntity getEntityByID()
} 

class EventManager << (S,#FF7700) >> {
   - std::vector<AbstractEvent> eventList
   ==
   + void pollEvents()
}

class SDLAssetManager << (S,#FF7700) >> {
   - textureContainerType textureContainer
   - SDL_Renderer* renderer
   + void setRenderer(SDL_Renderer*)
   + SDLDrawable* addSurface(const stringType&, SDL_Surface*, SDL_Rect* = FULL_ASSET)
   + SDLDrawable* addBMP(const stringType&, const stringType&, SDL_Rect* = FULL_ASSET)
   + boolType hasDrawable(const stringType&);
   + SDLDrawable* getDrawable(const stringType&)
   + boolType removeDrawable(const stringType&)
}  


} 
'END package "Managers"




''
'' CustomAttribute
''

package "CustomAttribute" {

class CustomAttribute {
   - enumAttribute valueType
   - CustomAttributeUnion value
   ==
   + CustomAttribute(integerType iValue);
   + CustomAttribute(floatType fValue);
   + CustomAttribute(charType cValue);
   + CustomAttribute(intArrayType*);
   + CustomAttribute(floatArrayType*);
   + CustomAttribute(stringType*);
   + CustomAttribute(void*);
   + integerType get_int();
   + void set(integerType iValue);
   + floatType get_float();
   + void set(floatType fValue);
   + charType get_char();
   + void set(charType cValue);
   + intArrayType* get_intArray();
   + void set(intArrayType*);
   + floatArrayType* get_floatArray();
   + void set(floatArrayType*);
   + stringType* get_string();
   + void set(stringType*);
   + void* get_void();
   + void set(void*);
   + enumAttribute getType();
}

enum enumAttribute {
	 INTEGER
	 FLOAT
	 CHAR
	 VOID
	 INTEGER_VECTOR
	 DOUBLE_VECTOR
	 STRING
}

class CustomAttributeUnion << (U, #FFFFFF) Union >> {
   + integerType i
   + floatType f
   + charType c
   + stringType* s
   + void* v
}

} 
'END package "CustomAttribute"

'CustomAttribute Relations
CustomAttribute o-- CustomAttributeUnion : one >
CustomAttribute -- enumAttribute

''
'' COMPONENTS
''

package "Components" #95ABD4 {

abstract class AbstractComponent {
   - std::string name
   - enumComponentFamily family
   - bool bIsParent = false
   - std::map<stringType, CustomAttribute> customAttributeMap

   - std::list<AbstractComponent> children
   ==
   .. constructor ..
   + AbstractComponent(stringType name, enumComponentFamily family, bool bIsParent)
   .. name ..
   + std::string getName()
   + void setName(stringType name)
   .. family ..
   + enumComponentFamily getFamily()
   + void setFamily(enum ComponentFamily family)
   .. bIsParent ..
   + bool isParent()
   .. custom values ..
   + integerType getCustomAttribute_int(stringType);
   + stringType setCustomAttribute(stringType, integerType);

   + floatType getCustomAttribute_float(stringType);
   + stringType setCustomAttribute(stringType, floatType);

   + charType getCustomAttribute_char(stringType);
   + stringType setCustomAttribute(stringType, charType);

   + intArrayType* getCustomAttribute_intArray(stringType);
   + stringType setCustomAttribute(stringType, intArrayType*);

   + floatArrayType* getCustomAttribute_floatArray(stringType);
   + stringType setCustomAttribute(stringType, floatArrayType*);

   + stringType& getCustomAttribute_string(stringType);
   + stringType setCustomAttribute(stringType, stringType);

   + void* getCustomAttribute_void(stringType);
   + stringType setCustomAttribute(stringType, void*);

   + bool hasCustomAttribute(stringType);
   + enumAttribute getCustomAttributeType(stringType);
   + void deleteCustomAttribute(stringType);

   .. children ..
   + void addChild(AbstractComponent)
   + bool hasChildren()
   + std::list<AbstractComponent> getChildren()
}

class GraphicsComponent {
   - enumComponentFamily family = GRAPHICS
   - Vector position
   - Vector offset
   - Vector origin
   - AbstractDrawable reference;
}

class CollisionComponent {
   - enumComponentFamily family = COLLISION
   - Vector position
   - Vector offset
   - Vector origin
   - Quaternion orientation
   ==
   CollisionComponent(stringType name, bool bIsParent = true)
}

class TextComponent {

}

class PhysicsComponent {
   - enumComponentFamily family = PHYSICS
   - Vector position
   - Vector velocity
   - Vector acceleration
   - Quaternion orientation
   
   - floatType damping
   - floatType inverseMass
   ==
   PhysicsComponent(stringType name, bool bIsParent = true)
}

'Aggregation between the component and the CustomAttributes
AbstractComponent o-- CustomAttribute




} 
'END package "Components"

'Relations
TextComponent -|> AbstractComponent
PhysicsComponent -|> AbstractComponent
CollisionComponent -|> AbstractComponent
GraphicsComponent -|> AbstractComponent
''
'' SYSTEMS
''

package "Systems" #6B7EA8 {

abstract class AbstractSystem {
   - stringType type
   ==
   + stringType getType()
   + virtual createMessages()
   + virtual process()
}

class GraphicsSystem {

}

GraphicsSystem --|> AbstractSystem

class PhysicsSystem {

}

PhysicsSystem --|> AbstractSystem

class CollisionSystem {

}

CollisionSystem --|> AbstractSystem

} 
'END package "Systems"

Kampf o-- AbstractRenderWindow
Kampf o-- AbstractSystem
EntityManager *-- AbstractEntity

AbstractEntity o-- AbstractComponent : many >

class Messenger {
   - vector<Message> messageList
==
   + Messenger()
   + appendMessage(Message message)
   + const vector<Message>& retrieveMessages()
   + void insertMessage(int position, Message message)
   + Message popMessage()
   + void deleteMessage(int messageID)
   + void deleteMessage(Message message)
   + Message hasMessage(int messageID)
   + void clearMessages()
}

class Message {
   - incrementType id
   - enumMessageType type
   - AbstractEntity* firstEntity = nullptr
   - AbstractComponent* firstComponent = nullptr
   - std::map<stringType, CustomAttribute> customData
   - void* data = nullptr
   + incrementType getID()
   + enumMessageType getType()
   + stringType getTypeString()
   + void setType(enumMessageType)
   + void setTypeString(stringType typeString)
}

enum enumMessageType {
     CUSTOM,
     COLLIDE,
     EVENT_COMMON,
     EVENT_WINDOW,
     EVENT_KEYBOARD,
     EVENT_TEXT_EDIT,
     EVENT_TEXT_INPUT,
     EVENT_MOUSE_MOVE,
     EVENT_MOUSE_BUTTON,
     EVENT_MOUSE_WHEEL,
     EVENT_JOYSTICK_AXIS,
     EVENT_JOYSTICK_BALL,
     EVENT_JOYSTICK_HAT,
     EVENT_JOYSTICK_BUTTON,
     EVENT_JOYSTICK_DEVICE,
     EVENT_CONTROLLER_AXIS,
     EVENT_CONTROLLER_BUTTON,
     EVENT_CONTROLLER_DEVICE,
     EVENT_QUIT,
     EVENT_USER_CUSTOM,
     EVENT_OS,
     EVENT_TOUCH_SINGLE,
     EVENT_TOUCH_MULTI,
     EVENT_TOUCH_DOLLAR,
     EVENT_DRAG_DROP,
}

class RuleMachine {
   - std::vector<Rule> ruleList
==
   + addRule(std::function<boolType(Message*)> conditionFunction,
     	     std::function<boolType(Message*)> ruleFunction)
}

class Rule {
   + std::function<boolType(Message*)> conditionFunction
   + std::function<boolType(Message*)> ruleFunction
}

class LuaScript {
  - lua_State *L
  + lua_State* getState()
  + setGlobal(stringType, floatType)
  + floatType getGlobal_float(stringType)
  + void setGlobal(stringType, integerType);
  + integerType getGlobal_integer(stringType);
  + void setGlobal(stringType, stringType)
  + stringType getGlobal_string(stringType)
  + void setGlobal(stringType, floatArrayType)
  + floatArrayType getGlobal_floatArray(stringType)
  + void setGlobal(stringType, intArrayType)
  + intArrayType getGlobal_intArray(stringType)
  
  + boolType loadScript(stringType)
  + boolType loadString(stringType)
  + void runInterpreter()
  + void addPath(stringType)
  + void clearPath()
}

Kampf *-- LuaScript

RuleMachine *-- Rule
Kampf *-- RuleMachine

Message -- enumMessageType

Kampf *-- Messenger
Messenger o-- Message
Messenger .. AbstractSystem : Kampf::getMessenger()
EntityManager .. Kampf : EntityManager::getInstance()

package "Math" {
class Vector3 {
  - floatType x
  - floatType y
  - floatType z
  + integerType length()
  + comp_prod(const Vector3& o)
  + comp_prod_update(const Vector3& o)
  + floatType magnitude_real()
  + floatType magnitude()
  + Vector3 unit()
  + Vector3 cross(const Vector3& o)
}

class Matrix3 {
  + floatType data[9]
  + const static int length = 9
  + const static int length = 3
  + Matrix3(std::initializer_list<floatType> l)
  + Matrix3()
  + void fill(floatType)
  + void identity(floatType)
  + Vector3 row(integerType)
  + Vector3 col(integerType)
  + floatType det()
  + floatType get(int i, int j)
  + void set(int i, int j, floatType val)
  + set(std::initializer_list<floatType> l)
}

class Quaternion {
  + floatType w
  + floatType i
  + floatType j
  + floatType k
  + integerType length
  + Quaternion conj()
  + Quaternion inv()
  + floatType magnitude_real()
  + floatType magnitude()
  + Quaternion unit()
  + Quaternion product()
}

}
'end package "Math"

package "Lua Scripting" #6B7EA8 {
class l_Vector3 << (L,#0077FF) >> {

}

class l_Quaternion << (L,#0077FF) >> {

}



}
'end package "Lua Scripting"
@enduml