
@startuml
'The namespace should be Kf::
set namespaceSeparator ::

'Main Facade Class
class Kampf << (S,#FF7700) Facade >> {
   - bool bRunning = false
   - AbstractRenderWindow windowContext
   - systemContainerType systemList
   - Messenger* messenger
   - RuleMachine* ruleMachine
   ==
   .. constructor ..
   + void Kampf(
   enumInitType initType = enumInitType::Basic,
   enumWindowType windowType = enumWindowType::SDL,
   enumRenderType renderType = enumRenderType::SDL
   )
   + void runMainLoop(bContinuous=true)
   -- getters --
   + AbstractRenderWindow getRenderWindow()
   + AbstractSystem getSystem(stringType systemType)
   + Messenger getMessenger()
   + Rulemachine getRuleMachine()
}

'The main render window, where all of the magic happens
abstract class AbstractRenderWindow {
   - int windowWidth = 800
   - int windowHeight = 600
   ==
   + AbstractRenderWindow(
     int windowWidth = 800,
     int windowHeight = 600
     )
   + virtual bool reinitialize() = 0
   + virtual bool intialize() = 0
   + virtual draw(AbstractDrawable drawable)
} 

class SDLRenderWindow {
   - int windowWidth = 800
   - int windowHeight = 600
   ==
   + bool reinitialize() = 0
   + bool intialize() = 0
   + draw(AbstractDrawable drawable)
}

SDLRenderWindow --> AbstractRenderWindow

''
'' ENTITIES
''
package "Entities" #C3B1A3 {
abstract class AbstractEntity {

   - stringType name = ""
   - stringType type = "abstract"
   - incrementType id
   - componentListType componentList
   ==
   + static incrementType EntityID = 0
   .. constructor ..
   + AbstractEntity(
     stringType name,
     incrementType id = GENERATE_ID,
     stringType type = ENTITY_ABSTRACT_TYPE
     )
   -- getters/setters --
   + stringType getName()
   + setName(stringType name)
   + stringType getType()
   + incrementType getID()
   
   + componentListType getComponentContainer();
   + componentListType getComponentsByFamily(enumComponentFamily family)
   + componentListType getComponentByName(stringType name)
   + AbstractComponent::iterator traverseComponentTree()

   + void addComponent(AbstractComponent theComponent)
} 	

} 
'END package "Entities"

''Relation between Entities
'' Nothing here


''
'' MANAGERS
''

package "Managers" #FE6F4D {

class EntityManager << (S,#FF7700) >> {
   - std::vector<AbstractEntity> entityList
   ==
   + void addEntity(AbstractEntity entity)
   + std::vector<AbstractEntity> getAllEntities()
   + AbstractEntity getEntityByID()
} 

class EventManager << (S,#FF7700) >> {
   - std::vector<AbstractEvent> eventList
   ==
   + void pollEvents()
}


} 
'END package "Managers"




''
'' CustomAttribute
''

package "CustomAttribute" {

class CustomAttribute {
   - enumAttribute valueType
   - CustomAttributeUnion value
   ==
   + CustomAttribute(integerType iValue);
   + CustomAttribute(floatType fValue);
   + CustomAttribute(charType cValue);
   + CustomAttribute(intArrayType*);
   + CustomAttribute(floatArrayType*);
   + CustomAttribute(stringType*);
   + CustomAttribute(void*);
   + integerType get_int();
   + void set(integerType iValue);
   + floatType get_float();
   + void set(floatType fValue);
   + charType get_char();
   + void set(charType cValue);
   + intArrayType* get_intArray();
   + void set(intArrayType*);
   + floatArrayType* get_floatArray();
   + void set(floatArrayType*);
   + stringType* get_string();
   + void set(stringType*);
   + void* get_void();
   + void set(void*);
   + enumAttribute getType();
}

enum enumAttribute {
	 INTEGER
	 FLOAT
	 CHAR
	 VOID
	 INTEGER_VECTOR
	 DOUBLE_VECTOR
	 STRING
}

class CustomAttributeUnion << (U, #FFFFFF) Union >> {
   + integerType i
   + floatType f
   + charType c
   + stringType* s
   + void* v
}

} 
'END package "CustomAttribute"

'CustomAttribute Relations
CustomAttribute o-- CustomAttributeUnion : one >
CustomAttribute -- enumAttribute

''
'' COMPONENTS
''

package "Components" #95ABD4 {

abstract class AbstractComponent {
   - std::string name
   - enumComponentFamily family
   - bool bIsParent = false
   - std::map<stringType, CustomAttribute> customAttributeMap

   - std::list<AbstractComponent> children
   ==
   .. constructor ..
   + AbstractComponent(stringType name, enumComponentFamily family, bool bIsParent)
   .. name ..
   + std::string getName()
   + void setName(stringType name)
   .. family ..
   + enumComponentFamily getFamily()
   + void setFamily(enum ComponentFamily family)
   .. bIsParent ..
   + bool isParent()
   .. custom values ..
   + integerType getCustomAttribute_int(stringType);
   + stringType setCustomAttribute(stringType, integerType);

   + floatType getCustomAttribute_float(stringType);
   + stringType setCustomAttribute(stringType, floatType);

   + charType getCustomAttribute_char(stringType);
   + stringType setCustomAttribute(stringType, charType);

   + intArrayType* getCustomAttribute_intArray(stringType);
   + stringType setCustomAttribute(stringType, intArrayType*);

   + floatArrayType* getCustomAttribute_floatArray(stringType);
   + stringType setCustomAttribute(stringType, floatArrayType*);

   + stringType& getCustomAttribute_string(stringType);
   + stringType setCustomAttribute(stringType, stringType);

   + void* getCustomAttribute_void(stringType);
   + stringType setCustomAttribute(stringType, void*);

   + bool hasCustomAttribute(stringType);
   + enumAttribute getCustomAttributeType(stringType);
   + void deleteCustomAttribute(stringType);

   .. children ..
   + void addChild(AbstractComponent)
   + bool hasChildren()
   + std::list<AbstractComponent> getChildren()
}

class GraphicsComponent {
   - enumComponentFamily family = GRAPHICS
   - Vector position
   - Vector offset
   - Vector origin
   - AbstractDrawable reference;
}

class CollisionComponent {
   - enumComponentFamily family = COLLISION
   - Vector position
   - Vector offset
   - Vector origin
   - Quaternion orientation
   ==
   CollisionComponent(stringType name, bool bIsParent = true)
}

class TextComponent {

}

class PhysicsComponent {
   - enumComponentFamily family = PHYSICS
   - Vector position
   - Vector velocity
   - Vector acceleration
   - Quaternion orientation
   
   - floatType damping
   - floatType inverseMass
   ==
   PhysicsComponent(stringType name, bool bIsParent = true)
}

'Aggregation between the component and the CustomAttributes
AbstractComponent o-- CustomAttribute




} 
'END package "Components"

'Relations
TextComponent -|> AbstractComponent
PhysicsComponent -|> AbstractComponent
CollisionComponent -|> AbstractComponent
GraphicsComponent -|> AbstractComponent
''
'' SYSTEMS
''

package "Systems" #6B7EA8 {

abstract class AbstractSystem {
   - stringType type
   ==
   + stringType getType()
   + virtual createMessages()
   + virtual process()
}

class GraphicsSystem {

}

GraphicsSystem --|> AbstractSystem

class PhysicsSystem {

}

PhysicsSystem --|> AbstractSystem

class CollisionSystem {

}

CollisionSystem --|> AbstractSystem

} 
'END package "Systems"

Kampf o-- AbstractRenderWindow
Kampf o-- AbstractSystem
EntityManager *-- AbstractEntity

AbstractEntity o-- AbstractComponent : many >

class Messenger {
   - vector<Message> messageList
==
   + Messenger()
   + appendMessage(Message message)
   + const vector<Message>& retrieveMessages()
   + void insertMessage(int position, Message message)
   + Message popMessage()
   + void deleteMessage(int messageID)
   + void deleteMessage(Message message)
   + Message hasMessage(int messageID)
   + void clearMessages()
}

class Message {
   - int messageID
   - enumMessageType messageType
   - AbstractEntity* entity = nullptr
   - AbstractComponent* component = nullptr
   - void* customData = nullptr
}

enum enumMessageType {
     CUSTOM,
     COLLIDE,
     EVENT
}

class RuleMachine {
   - std::vector<Rule> ruleList
==
   + addRule(std::function<Message> conditionFunction,
     	     std::function<Message> ruleFunction)
}

class Rule {
   + std::function<Message> conditionFunction
   + std::function<Message> ruleFunction
}

RuleMachine *-- Rule
Kampf *-- RuleMachine

Message -- enumMessageType

Kampf *-- Messenger
Messenger o-- Message
Messenger .. AbstractSystem : Kampf::getMessenger()
EntityManager .. Kampf : EntityManager::getInstance()


@enduml